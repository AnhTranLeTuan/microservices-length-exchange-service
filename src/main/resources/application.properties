spring.config.import=optional:configserver:


spring.application.name=length-exchange-service

server.port=8000

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=123456
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.show-sql=true
spring.h2.console.enabled=true
spring.jpa.defer-datasource-initialization=true

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

## Configuration for "retry-example" of @Retry
resilience4j.retry.instances.retry-example.maxAttempts=6
resilience4j.retry.instances.retry-example.waitDuration=1s
## After each failing attempt, the wait time will exponentially increase (example: 1s -> 2s -> 4s -> 8s -> 16s)
resilience4j.retry.instances.example.enableExponentialBackoff=true

## Configuration for "circuit-breaker-example" of @CircuitBreaker
resilience4j.circuitbreaker.instances.circuit-breaker-example.failureRateThreshold=70
resilience4j.circuitbreaker.instances.circuit-breaker-example.waitDurationInOpenState=50s

## Configuration for "circuit-breaker-example" of @CircuitBreaker
resilience4j.ratelimiter.instances.rate-limiter-example.limitForPeriod=2
resilience4j.ratelimiter.instances.rate-limiter-example.limitRefreshPeriod=10s

## Value 1.0 mean trace every request. We can set the value to be 0.05 if we want to trace only 5% of requests
management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]